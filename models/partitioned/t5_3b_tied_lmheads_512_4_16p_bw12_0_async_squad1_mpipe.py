"""AutoGenerated with:
python -m autopipe.partition t5 --model_name_or_path t5-3b --t5_task squad1 --lmhead --n_iter 10 --analysis_batch_size 4 --partitioning_batch_size 4 --precompute_masks --stateless_tied --lmhead --n_partitions 16 --L 16 32 48 --max_seq_length 512 --answer_max_seq_length 4 --partitioning_method mpipe --preset ftpipe --dont_use_async_meta_alg --save_memory_mode --special_blocks T5Block --bw 12 --basic_blocks T5Block
"""
import torch.nn.functional
import torch
import torch.fft
import torch.functional
import math
import torch.linalg
from torch import Tensor
import torch.nn as nn
from itertools import chain
from typing import Optional, Tuple, Iterator, Iterable, OrderedDict, Dict
import collections

from typing import Type
from torch.nn.modules.loss import CrossEntropyLoss
from models.normal.NLP_models.stateless import StatelessEmbedding
from models.normal.NLP_models.modeling_t5 import T5Block
from torch.nn.modules.linear import Linear
from models.normal.NLP_models.modeling_t5 import T5LayerNorm
from torch.nn.modules.dropout import Dropout
# this is an auto generated file do not edit unless you know what you are doing


# partition adjacency
# model inputs {0, 1, 2, 3, 4, 5, 6}
# partition 0 {'inputs': {'decoder_input_ids', 'input_ids', 'attention_mask'}, 'outputs': {1, 2, 3, 4, 5}}
# partition 1 {'inputs': {0, 'attention_mask'}, 'outputs': {2}}
# partition 2 {'inputs': {0, 1, 'attention_mask'}, 'outputs': {3}}
# partition 3 {'inputs': {0, 2, 'attention_mask'}, 'outputs': {4}}
# partition 4 {'inputs': {0, 3, 'attention_mask'}, 'outputs': {5}}
# partition 5 {'inputs': {'inverted_encoder_attention_mask', 0, 4, 'decoder_attention_mask'}, 'outputs': {6}}
# partition 6 {'inputs': {5, 'lm_labels'}, 'outputs': {'output'}}
# model outputs {6}


def create_pipeline_configuration(DEBUG=False, batch_size=4):
    config = {
        'batch_dim': 0,
        'depth': 10000,
        'basic_blocks': (CrossEntropyLoss,StatelessEmbedding,T5Block,Linear,T5LayerNorm,Dropout),
        'model_inputs': {
            'attention_mask': {
                'shape': torch.Size([4, 1, 1, 512]),
                'dtype': torch.float32,
                'is_batched': True,
                'used_by': [0, 1, 2, 3, 4]},
            'decoder_attention_mask': {
                'shape': torch.Size([4, 1, 4, 4]),
                'dtype': torch.float32,
                'is_batched': True,
                'used_by': [5]},
            'decoder_input_ids': {
                'shape': torch.Size([4, 4]),
                'dtype': torch.int64,
                'is_batched': True,
                'used_by': [0]},
            'input_ids': {
                'shape': torch.Size([4, 512]),
                'dtype': torch.int64,
                'is_batched': True,
                'used_by': [0]},
            'inverted_encoder_attention_mask': {
                'shape': torch.Size([4, 1, 1, 512]),
                'dtype': torch.float32,
                'is_batched': True,
                'used_by': [5]},
            'lm_labels': {
                'shape': torch.Size([4, 4]),
                'dtype': torch.int64,
                'is_batched': True,
                'used_by': [6]}},
        'model_outputs': {
            'T5ForConditionalGeneration/CrossEntropyLoss[lm_loss]': {
                'shape': torch.Size([1]),
                'dtype': torch.float32,
                'is_batched': False,
                'created_by': 6}},
        'stages': {
            0: {
                'stage_cls': Partition0,
                'inputs': {
                    'attention_mask': {
                        'shape': torch.Size([4, 1, 1, 512]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'decoder_input_ids': {
                        'shape': torch.Size([4, 4]),
                        'dtype': torch.int64,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'input_ids': {
                        'shape': torch.Size([4, 512]),
                        'dtype': torch.int64,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_1': {
                        'shape': torch.Size([4, 32, 512, 512]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [1]},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]': {
                        'shape': torch.Size([4, 512, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [1]},
                    'T5ForConditionalGeneration/T5Stack[decoder]/StatelessEmbedding[embed_tokens]': {
                        'shape': torch.Size([4, 4, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [5]}},
                'devices': ['cpu' if DEBUG else 'cuda:0'],
                'stage_depth': 6},
            1: {
                'stage_cls': Partition1,
                'inputs': {
                    'attention_mask': {
                        'shape': torch.Size([4, 1, 1, 512]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_1': {
                        'shape': torch.Size([4, 32, 512, 512]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 0},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]': {
                        'shape': torch.Size([4, 512, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 0}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_2': {
                        'shape': torch.Size([4, 32, 512, 512]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [2]},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]': {
                        'shape': torch.Size([4, 512, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [2]}},
                'devices': ['cpu' if DEBUG else 'cuda:1'],
                'stage_depth': 5},
            2: {
                'stage_cls': Partition2,
                'inputs': {
                    'attention_mask': {
                        'shape': torch.Size([4, 1, 1, 512]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_2': {
                        'shape': torch.Size([4, 32, 512, 512]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 1},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]': {
                        'shape': torch.Size([4, 512, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 1}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_3': {
                        'shape': torch.Size([4, 32, 512, 512]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [3]},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16]': {
                        'shape': torch.Size([4, 512, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [3]}},
                'devices': ['cpu' if DEBUG else 'cuda:2'],
                'stage_depth': 4},
            3: {
                'stage_cls': Partition3,
                'inputs': {
                    'attention_mask': {
                        'shape': torch.Size([4, 1, 1, 512]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_3': {
                        'shape': torch.Size([4, 32, 512, 512]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 2},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16]': {
                        'shape': torch.Size([4, 512, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 2}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_4': {
                        'shape': torch.Size([4, 32, 512, 512]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [4]},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]': {
                        'shape': torch.Size([4, 512, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [4]}},
                'devices': ['cpu' if DEBUG else 'cuda:3'],
                'stage_depth': 3},
            4: {
                'stage_cls': Partition4,
                'inputs': {
                    'attention_mask': {
                        'shape': torch.Size([4, 1, 1, 512]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_4': {
                        'shape': torch.Size([4, 32, 512, 512]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]': {
                        'shape': torch.Size([4, 512, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 3}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5LayerNorm[final_layer_norm]': {
                        'shape': torch.Size([4, 512, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [5]}},
                'devices': ['cpu' if DEBUG else 'cuda:4'],
                'stage_depth': 2},
            5: {
                'stage_cls': Partition5,
                'inputs': {
                    'decoder_attention_mask': {
                        'shape': torch.Size([4, 1, 4, 4]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'inverted_encoder_attention_mask': {
                        'shape': torch.Size([4, 1, 1, 512]),
                        'dtype': torch.float32,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'T5ForConditionalGeneration/T5Stack[encoder]/T5LayerNorm[final_layer_norm]': {
                        'shape': torch.Size([4, 512, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 4},
                    'T5ForConditionalGeneration/T5Stack[decoder]/StatelessEmbedding[embed_tokens]': {
                        'shape': torch.Size([4, 4, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 0}},
                'outputs': {
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]': {
                        'shape': torch.Size([4, 4, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'used_by': [6]}},
                'devices': ['cpu' if DEBUG else 'cuda:5'],
                'stage_depth': 1},
            6: {
                'stage_cls': Partition6,
                'inputs': {
                    'lm_labels': {
                        'shape': torch.Size([4, 4]),
                        'dtype': torch.int64,
                        'req_grad': False,
                        'is_batched': True,
                        'created_by': -1},
                    'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]': {
                        'shape': torch.Size([4, 4, 1024]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': True,
                        'created_by': 5}},
                'outputs': {
                    'T5ForConditionalGeneration/CrossEntropyLoss[lm_loss]': {
                        'shape': torch.Size([1]),
                        'dtype': torch.float32,
                        'req_grad': True,
                        'is_batched': False,
                        'used_by': [-1]}},
                'devices': ['cpu' if DEBUG else 'cuda:6'],
                'stage_depth': 0}},
        'stage_to_device_map': [0, 1, 2, 3, 4, 5, 6]}
    
    
    # switching batch size
    batch_dim = config['batch_dim']
    for d in chain(config['model_inputs'].values(),config['model_outputs'].values()):
        if d['is_batched']:
            shape = d['shape']
            d['shape'] = torch.Size(shape[:batch_dim] + (batch_size,) + shape[batch_dim+1:])
    
    for s in config['stages'].values():
        for d in chain(s['inputs'].values(),s['outputs'].values()):
            if d['is_batched']:
                shape = d['shape']
                d['shape'] = torch.Size(shape[:batch_dim] + (batch_size,) + shape[batch_dim+1:])
    
    return config

class Partition0(nn.Module):
    LAYER_SCOPES = [
            'T5ForConditionalGeneration/T5Stack[encoder]/StatelessEmbedding[embed_tokens]',
            'T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[1]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[3]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[4]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[7]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[9]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[10]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]',
            'T5ForConditionalGeneration/T5Stack[decoder]/StatelessEmbedding[embed_tokens]',
        ]
    TENSORS = [
            'T5ForConditionalGeneration/Parameter[shared_embed_weight]',
        ]
    def __init__(self, layers, tensors, device='cuda:0'):
        super().__init__()

        # Initialize partition layers
        for idx, layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}' ,layers[layer_scope])

        # Initialize partition tensors (params and buffs)
        b = p = 0
        for tensor_scope in self.TENSORS:
            tensor = tensors[tensor_scope]
            if isinstance(tensor, nn.Parameter):
                self.register_parameter(f'p_{p}', tensor)
                p += 1
            else:
                self.register_buffer(f'b_{b}', tensor)
                b += 1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1]
        self.lookup = {'l_0': 'encoder.embed_tokens',
                        'l_1': 'encoder.dropout',
                        'l_2': 'encoder.0',
                        'l_3': 'encoder.1',
                        'l_4': 'encoder.2',
                        'l_5': 'encoder.3',
                        'l_6': 'encoder.4',
                        'l_7': 'encoder.5',
                        'l_8': 'encoder.6',
                        'l_9': 'encoder.7',
                        'l_10': 'encoder.8',
                        'l_11': 'encoder.9',
                        'l_12': 'encoder.10',
                        'l_13': 'encoder.11',
                        'l_14': 'decoder.embed_tokens',
                        'p_0': 'shared_embed_weight'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[encoder]/StatelessEmbedding[embed_tokens] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout] <=> self.l_1
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[0] <=> self.l_2
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[1] <=> self.l_3
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[2] <=> self.l_4
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[3] <=> self.l_5
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[4] <=> self.l_6
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[5] <=> self.l_7
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[6] <=> self.l_8
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[7] <=> self.l_9
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[8] <=> self.l_10
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[9] <=> self.l_11
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[10] <=> self.l_12
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11] <=> self.l_13
        # T5ForConditionalGeneration/T5Stack[decoder]/StatelessEmbedding[embed_tokens] <=> self.l_14
        # T5ForConditionalGeneration/Parameter[shared_embed_weight] <=> self.p_0
        # input0 <=> attention_mask
        # input2 <=> decoder_input_ids
        # input3 <=> input_ids
        attention_mask, decoder_input_ids, input_ids = unflatten(args, self.input_structure)
        t_0 = decoder_input_ids.size()
        t_1 = input_ids.size()
        t_1 = t_1[-1]
        t_1 = input_ids.view(-1, t_1)
        t_1 = self.l_0(self.p_0, t_1)
        t_1 = self.l_1(t_1)
        t_1 = self.l_2(t_1, attention_mask=attention_mask, position_bias=None, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_2 = t_1[0]
        t_1 = t_1[1]
        t_2 = self.l_3(t_2, attention_mask=attention_mask, position_bias=t_1, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_2 = self.l_4(t_2, attention_mask=attention_mask, position_bias=t_1, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_2 = self.l_5(t_2, attention_mask=attention_mask, position_bias=t_1, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_2 = self.l_6(t_2, attention_mask=attention_mask, position_bias=t_1, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_2 = self.l_7(t_2, attention_mask=attention_mask, position_bias=t_1, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_2 = self.l_8(t_2, attention_mask=attention_mask, position_bias=t_1, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_2 = self.l_9(t_2, attention_mask=attention_mask, position_bias=t_1, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_2 = self.l_10(t_2, attention_mask=attention_mask, position_bias=t_1, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_2 = self.l_11(t_2, attention_mask=attention_mask, position_bias=t_1, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_2 = self.l_12(t_2, attention_mask=attention_mask, position_bias=t_1, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_2 = self.l_13(t_2, attention_mask=attention_mask, position_bias=t_1, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_0 = t_0[-1]
        t_0 = decoder_input_ids.view(-1, t_0)
        t_0 = self.l_14(self.p_0, t_0)
        # Returning:
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11]
        # T5ForConditionalGeneration/T5Stack[decoder]/StatelessEmbedding[embed_tokens]
        return list(flatten((t_1, t_2, t_0)))

    def state_dict(self, *args, **kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self, *args, **kwargs)

    def load_state_dict(self, *args, **kwargs):
        return load_state_dict(self, *args, **kwargs)

    def named_parameters(self, *args, **kwargs):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self, *args, **kwargs)

    def named_buffers(self, *args, **kwargs):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self, *args, **kwargs)

    def cpu(self):
        return cpu(self)

    def cuda(self, device=None):
        return cuda(self, device=device)

    def to(self, *args, **kwargs):
        return to(self, *args, **kwargs)


class Partition1(nn.Module):
    LAYER_SCOPES = [
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]',
        ]
    TENSORS = [
        ]
    def __init__(self, layers, tensors, device='cuda:1'):
        super().__init__()

        # Initialize partition layers
        for idx, layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}' ,layers[layer_scope])

        # Initialize partition tensors (params and buffs)
        b = p = 0
        for tensor_scope in self.TENSORS:
            tensor = tensors[tensor_scope]
            if isinstance(tensor, nn.Parameter):
                self.register_parameter(f'p_{p}', tensor)
                p += 1
            else:
                self.register_buffer(f'b_{b}', tensor)
                b += 1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1]
        self.lookup = {'l_0': 'encoder.12',
                        'l_1': 'encoder.13',
                        'l_2': 'encoder.14'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[12] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[13] <=> self.l_1
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14] <=> self.l_2
        # input0 <=> attention_mask
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22 <=> x0
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[11] <=> x1
        attention_mask, x0, x1 = unflatten(args, self.input_structure)
        t_0 = self.l_0(x1, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_0 = self.l_1(t_0, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_0 = self.l_2(t_0, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        # Returning:
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14]
        return list(flatten((x0, t_0)))

    def state_dict(self, *args, **kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self, *args, **kwargs)

    def load_state_dict(self, *args, **kwargs):
        return load_state_dict(self, *args, **kwargs)

    def named_parameters(self, *args, **kwargs):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self, *args, **kwargs)

    def named_buffers(self, *args, **kwargs):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self, *args, **kwargs)

    def cpu(self):
        return cpu(self)

    def cuda(self, device=None):
        return cuda(self, device=device)

    def to(self, *args, **kwargs):
        return to(self, *args, **kwargs)


class Partition2(nn.Module):
    LAYER_SCOPES = [
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[15]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16]',
        ]
    TENSORS = [
        ]
    def __init__(self, layers, tensors, device='cuda:2'):
        super().__init__()

        # Initialize partition layers
        for idx, layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}' ,layers[layer_scope])

        # Initialize partition tensors (params and buffs)
        b = p = 0
        for tensor_scope in self.TENSORS:
            tensor = tensors[tensor_scope]
            if isinstance(tensor, nn.Parameter):
                self.register_parameter(f'p_{p}', tensor)
                p += 1
            else:
                self.register_buffer(f'b_{b}', tensor)
                b += 1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1]
        self.lookup = {'l_0': 'encoder.15',
                        'l_1': 'encoder.16'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[15] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16] <=> self.l_1
        # input0 <=> attention_mask
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22 <=> x0
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[14] <=> x1
        attention_mask, x0, x1 = unflatten(args, self.input_structure)
        t_0 = self.l_0(x1, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_0 = self.l_1(t_0, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        # Returning:
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16]
        return list(flatten((x0, t_0)))

    def state_dict(self, *args, **kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self, *args, **kwargs)

    def load_state_dict(self, *args, **kwargs):
        return load_state_dict(self, *args, **kwargs)

    def named_parameters(self, *args, **kwargs):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self, *args, **kwargs)

    def named_buffers(self, *args, **kwargs):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self, *args, **kwargs)

    def cpu(self):
        return cpu(self)

    def cuda(self, device=None):
        return cuda(self, device=device)

    def to(self, *args, **kwargs):
        return to(self, *args, **kwargs)


class Partition3(nn.Module):
    LAYER_SCOPES = [
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[18]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]',
        ]
    TENSORS = [
        ]
    def __init__(self, layers, tensors, device='cuda:3'):
        super().__init__()

        # Initialize partition layers
        for idx, layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}' ,layers[layer_scope])

        # Initialize partition tensors (params and buffs)
        b = p = 0
        for tensor_scope in self.TENSORS:
            tensor = tensors[tensor_scope]
            if isinstance(tensor, nn.Parameter):
                self.register_parameter(f'p_{p}', tensor)
                p += 1
            else:
                self.register_buffer(f'b_{b}', tensor)
                b += 1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1]
        self.lookup = {'l_0': 'encoder.17',
                        'l_1': 'encoder.18',
                        'l_2': 'encoder.19',
                        'l_3': 'encoder.20'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[17] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[18] <=> self.l_1
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[19] <=> self.l_2
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20] <=> self.l_3
        # input0 <=> attention_mask
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22 <=> x0
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[16] <=> x1
        attention_mask, x0, x1 = unflatten(args, self.input_structure)
        t_0 = self.l_0(x1, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_0 = self.l_1(t_0, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_0 = self.l_2(t_0, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_0 = self.l_3(t_0, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        # Returning:
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20]
        return list(flatten((x0, t_0)))

    def state_dict(self, *args, **kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self, *args, **kwargs)

    def load_state_dict(self, *args, **kwargs):
        return load_state_dict(self, *args, **kwargs)

    def named_parameters(self, *args, **kwargs):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self, *args, **kwargs)

    def named_buffers(self, *args, **kwargs):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self, *args, **kwargs)

    def cpu(self):
        return cpu(self)

    def cuda(self, device=None):
        return cuda(self, device=device)

    def to(self, *args, **kwargs):
        return to(self, *args, **kwargs)


class Partition4(nn.Module):
    LAYER_SCOPES = [
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[21]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[22]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5Block[23]',
            'T5ForConditionalGeneration/T5Stack[encoder]/T5LayerNorm[final_layer_norm]',
        ]
    TENSORS = [
        ]
    def __init__(self, layers, tensors, device='cuda:4'):
        super().__init__()

        # Initialize partition layers
        for idx, layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}' ,layers[layer_scope])

        # Initialize partition tensors (params and buffs)
        b = p = 0
        for tensor_scope in self.TENSORS:
            tensor = tensors[tensor_scope]
            if isinstance(tensor, nn.Parameter):
                self.register_parameter(f'p_{p}', tensor)
                p += 1
            else:
                self.register_buffer(f'b_{b}', tensor)
                b += 1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1]
        self.lookup = {'l_0': 'encoder.21',
                        'l_1': 'encoder.22',
                        'l_2': 'encoder.23',
                        'l_3': 'encoder.final_layer_norm'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[21] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[22] <=> self.l_1
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[23] <=> self.l_2
        # T5ForConditionalGeneration/T5Stack[encoder]/T5LayerNorm[final_layer_norm] <=> self.l_3
        # input0 <=> attention_mask
        # T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22 <=> x0
        # T5ForConditionalGeneration/T5Stack[encoder]/T5Block[20] <=> x1
        attention_mask, x0, x1 = unflatten(args, self.input_structure)
        t_0 = self.l_0(x1, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_0 = self.l_1(t_0, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_0 = self.l_2(t_0, attention_mask=attention_mask, position_bias=x0, encoder_hidden_states=None, encoder_attention_mask=None, encoder_decoder_position_bias=None)
        t_0 = self.l_3(t_0)
        # Returning:
        # T5ForConditionalGeneration/T5Stack[encoder]/T5LayerNorm[final_layer_norm]
        return (t_0,)

    def state_dict(self, *args, **kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self, *args, **kwargs)

    def load_state_dict(self, *args, **kwargs):
        return load_state_dict(self, *args, **kwargs)

    def named_parameters(self, *args, **kwargs):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self, *args, **kwargs)

    def named_buffers(self, *args, **kwargs):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self, *args, **kwargs)

    def cpu(self):
        return cpu(self)

    def cuda(self, device=None):
        return cuda(self, device=device)

    def to(self, *args, **kwargs):
        return to(self, *args, **kwargs)


class Partition5(nn.Module):
    LAYER_SCOPES = [
            'T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/Dropout[dropout]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22]',
            'T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]',
        ]
    TENSORS = [
        ]
    def __init__(self, layers, tensors, device='cuda:5'):
        super().__init__()

        # Initialize partition layers
        for idx, layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}' ,layers[layer_scope])

        # Initialize partition tensors (params and buffs)
        b = p = 0
        for tensor_scope in self.TENSORS:
            tensor = tensors[tensor_scope]
            if isinstance(tensor, nn.Parameter):
                self.register_parameter(f'p_{p}', tensor)
                p += 1
            else:
                self.register_buffer(f'b_{b}', tensor)
                b += 1

        self.device = torch.device(device)
        self.input_structure = [1, 1, 1, 1]
        self.lookup = {'l_0': 'encoder.dropout',
                        'l_1': 'decoder.dropout',
                        'l_2': 'decoder.0',
                        'l_3': 'decoder.1',
                        'l_4': 'decoder.2',
                        'l_5': 'decoder.3',
                        'l_6': 'decoder.4',
                        'l_7': 'decoder.5',
                        'l_8': 'decoder.6',
                        'l_9': 'decoder.7',
                        'l_10': 'decoder.8',
                        'l_11': 'decoder.9',
                        'l_12': 'decoder.10',
                        'l_13': 'decoder.11',
                        'l_14': 'decoder.12',
                        'l_15': 'decoder.13',
                        'l_16': 'decoder.14',
                        'l_17': 'decoder.15',
                        'l_18': 'decoder.16',
                        'l_19': 'decoder.17',
                        'l_20': 'decoder.18',
                        'l_21': 'decoder.19',
                        'l_22': 'decoder.20',
                        'l_23': 'decoder.21',
                        'l_24': 'decoder.22',
                        'l_25': 'decoder.23'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[encoder]/Dropout[dropout] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[decoder]/Dropout[dropout] <=> self.l_1
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[0] <=> self.l_2
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[1] <=> self.l_3
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[2] <=> self.l_4
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[3] <=> self.l_5
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[4] <=> self.l_6
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[5] <=> self.l_7
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[6] <=> self.l_8
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[7] <=> self.l_9
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[8] <=> self.l_10
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[9] <=> self.l_11
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[10] <=> self.l_12
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[11] <=> self.l_13
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[12] <=> self.l_14
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[13] <=> self.l_15
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[14] <=> self.l_16
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[15] <=> self.l_17
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[16] <=> self.l_18
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[17] <=> self.l_19
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[18] <=> self.l_20
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[19] <=> self.l_21
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[20] <=> self.l_22
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[21] <=> self.l_23
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[22] <=> self.l_24
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23] <=> self.l_25
        # input1 <=> decoder_attention_mask
        # input4 <=> inverted_encoder_attention_mask
        # T5ForConditionalGeneration/T5Stack[encoder]/T5LayerNorm[final_layer_norm] <=> x0
        # T5ForConditionalGeneration/T5Stack[decoder]/StatelessEmbedding[embed_tokens] <=> x1
        decoder_attention_mask, inverted_encoder_attention_mask, x0, x1 = unflatten(args, self.input_structure)
        t_0 = self.l_0(x0)
        t_1 = self.l_1(x1)
        t_1 = self.l_2(t_1, attention_mask=decoder_attention_mask, position_bias=None, encoder_hidden_states=t_0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=None)
        t_2 = t_1[0]
        t_3 = t_1[1]
        t_1 = t_1[2]
        t_2 = self.l_3(t_2, attention_mask=decoder_attention_mask, position_bias=t_3, encoder_hidden_states=t_0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=t_1)
        t_2 = self.l_4(t_2, attention_mask=decoder_attention_mask, position_bias=t_3, encoder_hidden_states=t_0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=t_1)
        t_2 = self.l_5(t_2, attention_mask=decoder_attention_mask, position_bias=t_3, encoder_hidden_states=t_0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=t_1)
        t_2 = self.l_6(t_2, attention_mask=decoder_attention_mask, position_bias=t_3, encoder_hidden_states=t_0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=t_1)
        t_2 = self.l_7(t_2, attention_mask=decoder_attention_mask, position_bias=t_3, encoder_hidden_states=t_0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=t_1)
        t_2 = self.l_8(t_2, attention_mask=decoder_attention_mask, position_bias=t_3, encoder_hidden_states=t_0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=t_1)
        t_2 = self.l_9(t_2, attention_mask=decoder_attention_mask, position_bias=t_3, encoder_hidden_states=t_0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=t_1)
        t_2 = self.l_10(t_2, attention_mask=decoder_attention_mask, position_bias=t_3, encoder_hidden_states=t_0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=t_1)
        t_2 = self.l_11(t_2, attention_mask=decoder_attention_mask, position_bias=t_3, encoder_hidden_states=t_0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=t_1)
        t_2 = self.l_12(t_2, attention_mask=decoder_attention_mask, position_bias=t_3, encoder_hidden_states=t_0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=t_1)
        t_2 = self.l_13(t_2, attention_mask=decoder_attention_mask, position_bias=t_3, encoder_hidden_states=t_0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=t_1)
        t_2 = self.l_14(t_2, attention_mask=decoder_attention_mask, position_bias=t_3, encoder_hidden_states=t_0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=t_1)
        t_2 = self.l_15(t_2, attention_mask=decoder_attention_mask, position_bias=t_3, encoder_hidden_states=t_0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=t_1)
        t_2 = self.l_16(t_2, attention_mask=decoder_attention_mask, position_bias=t_3, encoder_hidden_states=t_0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=t_1)
        t_2 = self.l_17(t_2, attention_mask=decoder_attention_mask, position_bias=t_3, encoder_hidden_states=t_0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=t_1)
        t_2 = self.l_18(t_2, attention_mask=decoder_attention_mask, position_bias=t_3, encoder_hidden_states=t_0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=t_1)
        t_2 = self.l_19(t_2, attention_mask=decoder_attention_mask, position_bias=t_3, encoder_hidden_states=t_0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=t_1)
        t_2 = self.l_20(t_2, attention_mask=decoder_attention_mask, position_bias=t_3, encoder_hidden_states=t_0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=t_1)
        t_2 = self.l_21(t_2, attention_mask=decoder_attention_mask, position_bias=t_3, encoder_hidden_states=t_0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=t_1)
        t_2 = self.l_22(t_2, attention_mask=decoder_attention_mask, position_bias=t_3, encoder_hidden_states=t_0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=t_1)
        t_2 = self.l_23(t_2, attention_mask=decoder_attention_mask, position_bias=t_3, encoder_hidden_states=t_0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=t_1)
        t_2 = self.l_24(t_2, attention_mask=decoder_attention_mask, position_bias=t_3, encoder_hidden_states=t_0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=t_1)
        t_1 = self.l_25(t_2, attention_mask=decoder_attention_mask, position_bias=t_3, encoder_hidden_states=t_0, encoder_attention_mask=inverted_encoder_attention_mask, encoder_decoder_position_bias=t_1)
        # Returning:
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23]
        return (t_1,)

    def state_dict(self, *args, **kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self, *args, **kwargs)

    def load_state_dict(self, *args, **kwargs):
        return load_state_dict(self, *args, **kwargs)

    def named_parameters(self, *args, **kwargs):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self, *args, **kwargs)

    def named_buffers(self, *args, **kwargs):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self, *args, **kwargs)

    def cpu(self):
        return cpu(self)

    def cuda(self, device=None):
        return cuda(self, device=device)

    def to(self, *args, **kwargs):
        return to(self, *args, **kwargs)


class Partition6(nn.Module):
    LAYER_SCOPES = [
            'T5ForConditionalGeneration/T5Stack[decoder]/T5LayerNorm[final_layer_norm]',
            'T5ForConditionalGeneration/T5Stack[decoder]/Dropout[dropout]',
            'T5ForConditionalGeneration/Linear[lm_head]',
            'T5ForConditionalGeneration/CrossEntropyLoss[lm_loss]',
        ]
    TENSORS = [
        ]
    def __init__(self, layers, tensors, device='cuda:6'):
        super().__init__()

        # Initialize partition layers
        for idx, layer_scope in enumerate(self.LAYER_SCOPES):
            self.add_module(f'l_{idx}' ,layers[layer_scope])

        # Initialize partition tensors (params and buffs)
        b = p = 0
        for tensor_scope in self.TENSORS:
            tensor = tensors[tensor_scope]
            if isinstance(tensor, nn.Parameter):
                self.register_parameter(f'p_{p}', tensor)
                p += 1
            else:
                self.register_buffer(f'b_{b}', tensor)
                b += 1

        self.device = torch.device(device)
        self.input_structure = [1, 1]
        self.lookup = {'l_0': 'decoder.final_layer_norm',
                        'l_1': 'decoder.dropout',
                        'l_2': 'lm_head',
                        'l_3': 'lm_loss'}
        self.to(self.device)

    def forward(self, *args):
        # T5ForConditionalGeneration/T5Stack[decoder]/T5LayerNorm[final_layer_norm] <=> self.l_0
        # T5ForConditionalGeneration/T5Stack[decoder]/Dropout[dropout] <=> self.l_1
        # T5ForConditionalGeneration/Linear[lm_head] <=> self.l_2
        # T5ForConditionalGeneration/CrossEntropyLoss[lm_loss] <=> self.l_3
        # input5 <=> lm_labels
        # T5ForConditionalGeneration/T5Stack[decoder]/T5Block[23] <=> x0
        lm_labels, x0 = unflatten(args, self.input_structure)
        t_0 = self.l_0(x0)
        t_0 = self.l_1(t_0)
        t_0 = t_0 * 0.03125
        t_0 = self.l_2(t_0)
        t_1 = t_0.size(-1)
        t_1 = t_0.view(-1, t_1)
        t_0 = lm_labels.view(-1)
        t_0 = self.l_3(t_1, t_0)
        # Returning:
        # T5ForConditionalGeneration/CrossEntropyLoss[lm_loss]
        return (t_0,)

    def state_dict(self, *args, **kwargs):
        # we return the state dict of this part as it should be in the original model
        return state_dict(self, *args, **kwargs)

    def load_state_dict(self, *args, **kwargs):
        return load_state_dict(self, *args, **kwargs)

    def named_parameters(self, *args, **kwargs):
        # we return the named parameters of this part as it should be in the original model
        return named_parameters(self, *args, **kwargs)

    def named_buffers(self, *args, **kwargs):
        # we return the named buffers of this part as it should be in the original model
        return named_buffers(self, *args, **kwargs)

    def cpu(self):
        return cpu(self)

    def cuda(self, device=None):
        return cuda(self, device=device)

    def to(self, *args, **kwargs):
        return to(self, *args, **kwargs)


def traverse_model(module: nn.Module, depth: int, prefix: Optional[str] = None,
                   basic_blocks: Tuple[Type[nn.Module]] = (), full: bool = False) -> Iterator[
    Tuple[nn.Module, str, nn.Module, Optional[bool]]]:
    """
    iterate over model layers yielding the layer,layer_scope,encasing_module
    Parameters:
    -----------
    model:
        the model to iterate over
    depth:
        how far down in the model tree to go
    basic_blocks:
        a list of modules that if encountered will not be broken down
    full:
        whether to yield only layers specified by the depth and basic_block options or to yield all layers
    """
    if prefix is None:
        prefix = type(module).__name__

    for name, sub_module in module.named_children():
        scope = prefix + "/" + type(sub_module).__name__ + f"[{name}]"
        if len(list(sub_module.children())) == 0 or isinstance(sub_module, tuple(basic_blocks)) or depth == 0:
            if full:
                # TODO:
                # is_explicit_block_limit = len(list(sub_module.children())) != 0 and (isinstance(sub_module, tuple(basic_blocks)) or depth == 0)
                yield sub_module, scope, module, True

            else:
                yield sub_module, scope, module
        else:
            if full:
                yield sub_module, scope, module, False
            yield from traverse_model(sub_module, depth - 1, scope, basic_blocks, full)


def layerDict(model: nn.Module, depth=1000, basic_blocks=()) -> Dict[str, nn.Module]:
    return {s: l for l, s, _ in traverse_model(model, depth, basic_blocks=basic_blocks)}


def traverse_params_buffs(module: nn.Module, prefix: Optional[str] = None) -> Iterator[Tuple[torch.tensor, str]]:
    """
    iterate over model's buffers and parameters yielding obj,obj_scope

    Parameters:
    -----------
    model:
        the model to iterate over
    """
    if prefix is None:
        prefix = type(module).__name__

    # params
    for param_name, param in module.named_parameters(recurse=False):
        param_scope = f"{prefix}/{type(param).__name__}[{param_name}]"
        yield param, param_scope

    # buffs
    for buffer_name, buffer in module.named_buffers(recurse=False):
        buffer_scope = f"{prefix}/{type(buffer).__name__}[{buffer_name}]"
        yield buffer, buffer_scope

    # recurse
    for name, sub_module in module.named_children():
        yield from traverse_params_buffs(sub_module, prefix + "/" + type(sub_module).__name__ + f"[{name}]")


def tensorDict(model: nn.Module) -> OrderedDict[str, Tensor]:
    return collections.OrderedDict((s, t) for t, s in traverse_params_buffs(model))


def move_tensors(ts, device):
    def move(t):
        if isinstance(t, (nn.Module, Tensor)):
            return t.to(device)
        return t

    return nested_map(move, ts)


def nested_map(func, ts, full=False):
    if isinstance(ts, torch.Size):
        # size is inheriting from tuple which is stupid
        return func(ts)
    elif isinstance(ts, (list, tuple, set)):
        return type(ts)(nested_map(func, t, full=full) for t in ts)
    elif isinstance(ts, dict):
        return {k: nested_map(func, v, full=full) for k, v in ts.items()}
    elif isinstance(ts, slice) and full:
        start = nested_map(func, ts.start, full=full)
        stop = nested_map(func, ts.stop, full=full)
        step = nested_map(func, ts.step, full=full)
        return slice(start, stop, step)
    return func(ts)


def flatten(ts):
    if isinstance(ts, torch.Size):
        # size is inheriting from tuple which is stupid
        yield ts
    elif isinstance(ts, (list, tuple, set)):
        yield from chain(*[flatten(t) for t in ts])
    elif isinstance(ts, dict):
        yield from chain(*[flatten(t) for k, t in sorted(ts.items(), key=lambda t: t[0])])
    else:
        yield ts


def unflatten(xs, structure):
    return _unflatten(xs, structure)[0]


def _unflatten(xs, structure):
    if isinstance(structure, torch.Size):
        # torch.Size is subclass of tuple which is stupid
        return xs[0], 1

    if not isinstance(structure, (list, tuple, set, dict)):
        return xs[0], 1

    if isinstance(structure, (list, tuple, set)):
        offset = 0
        elements = []
        for s in structure:
            e, n = _unflatten(xs[offset:], s)
            elements.append(e)
            offset += n

        return type(structure)(elements), offset

    assert isinstance(structure, dict)
    offset = 0
    elements = dict()
    for k, v in sorted(structure.items(), key=lambda t: t[0]):
        e, n = _unflatten(xs[offset:], v)
        elements[k] = e
        offset += n

    return elements, offset


def state_dict(partition, *args, **kwargs):
    # we return the state dict of this part as it should be in the original model
    state = nn.Module.state_dict(partition, *args, **kwargs)
    lookup = partition.lookup
    result = dict()
    for k, v in state.items():
        if k in lookup:
            result[lookup[k]] = v
        else:
            assert '.' in k
            split_idx = k.find('.')
            new_k = lookup[k[:split_idx]] + k[split_idx:]
            result[new_k] = v
    return result


def load_state_dict(partition, state_dict, strict=True):
    reverse_lookup = {v: k for k, v in partition.lookup.items()}
    device = partition.device
    keys = list(partition.state_dict(None).keys())
    new_state = dict()
    for k in keys:
        if k in reverse_lookup:
            new_state[reverse_lookup[k]] = state_dict[k].to(device)
            continue
        idx = k.rfind(".")
        to_replace = k[:idx]
        if to_replace in reverse_lookup:
            key = reverse_lookup[to_replace] + k[idx:]
            new_state[key] = state_dict[k].to(device)
    nn.Module.load_state_dict(partition, new_state, strict=strict)


def named_buffers(partition, prefix='', recurse=True):
    # we return the named buffers of this part as it should be in the original model
    params = nn.Module.named_buffers(partition, prefix=prefix, recurse=recurse)
    lookup = partition.lookup
    for k, v in params:
        if k in lookup:
            yield lookup[k], v
        else:
            assert '.' in k
            split_idx = k.find('.')
            new_k = lookup[k[:split_idx]] + k[split_idx:]
            yield new_k, v


def named_parameters(partition, prefix='', recurse=True):
    # we return the named parameters of this part as it should be in the original model
    params = nn.Module.named_parameters(partition, prefix=prefix, recurse=recurse)
    lookup = partition.lookup
    for k, v in params:
        if k in lookup:
            yield lookup[k], v
        else:
            assert '.' in k
            split_idx = k.find('.')
            new_k = lookup[k[:split_idx]] + k[split_idx:]
            yield new_k, v


def cpu(partition):
    partition.device = torch.device('cpu')
    return nn.Module.cpu(partition)


def cuda(partition, device=None):
    if device is None:
        device = torch.cuda.current_device()
    partition.device = torch.device(device)
    return nn.Module.cuda(partition, partition.device)


def to(partition, *args, **kwargs):
    device = None
    if 'device' in kwargs:
        device = kwargs['device']
    elif 'tensor' in kwargs:
        device = kwargs['tensor'].device
    if args:
        if isinstance(args[0], (torch.device, int, str)):
            device = args[0]
        if torch.is_tensor(args[0]):
            device = args[0].device
    if not (device is None):
        partition.device = torch.device(device)
    return nn.Module.to(partition, *args, **kwargs)

model_args = {'model_name_or_path': 't5-3b', 'max_seq_length': 512, 'answer_max_seq_length': 4, 'stateless_tied': True, 'lmhead': True, 'precompute_masks': True}

def t5_3b_tied_lmheads_512_4_16p_bw12_0_async_squad1_mpipe():
    return dict(model_type='t5_stateless',
                model_name_or_path='t5-3b',
                do_lower_case=False,
                output_past=False,
                stateless_tied=True,
                explicitly_set_dict={'output_only': True, 'output_attentions': False, 'precompute_masks': True, 'output_hidden_states': False},
                do_resize_token_embedding=True,
                )
    
"""analysis summary
-I- Printing Report
warnings:
Partition0 output:T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_1 is not contiguous!
Partition1 output:T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_2 is not contiguous!
Partition2 output:T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_3 is not contiguous!
Partition3 output:T5ForConditionalGeneration/T5Stack[encoder]/tuple::__getitem___22_4 is not contiguous!
Number of nodes in Computation Graph: 168
Number of stages: 7
backward times include recomputation
Analysis for async_pipeline=True: last partition will not do recomputation.

Stage parameter count:
 {0: 636875776,
 1: 151001088,
 2: 100667392,
 3: 201334784,
 4: 151002112,
 5: 1610688512,
 6: 32871424,
 'total': 2884441088}

GPU parameter count:
 Number of Model Parameters 2884.4M
{0: 636875776,
 1: 151001088,
 2: 100667392,
 3: 201334784,
 4: 151002112,
 5: 1610688512,
 6: 32871424,
 'total': 2884441088}

real times are based on real measurements of execution time (with communication) of generated partitions ms
forward {0: 68.56, 1: 25.41, 2: 21.08, 3: 29.75, 4: 14.28, 5: 33.95, 6: 0.35}
backward {0: 138.53, 1: 44.99, 2: 34.03, 3: 56.0, 4: 45.2, 5: 87.22, 6: 0.62}

Analysis for T = (1-R)fwd + R*bwd:

Pipeline Slowdown: (compared to sequential execution with no communication, and same recompute policy)
forward 3.307
backward 2.706

Expected utilization by partition
forward {0: 0.83, 1: 0.2, 2: 0.14, 3: 0.26, 4: 0.2, 5: 0.5, 6: 0.01}
backward {0: 1.0, 1: 0.24, 2: 0.16, 3: 0.32, 4: 0.24, 5: 0.62, 6: 0.0}

worstcase: bwd: 138.528 fwd: 68.562
Expected speedup for 7 partitions is: 2.410
Assuming bandwidth of 12.0 GBps between GPUs

communication volumes size of activations of each partition
0: input size:'0.00 MB', recieve_time:'0.00 ms', out:'142.67 MB', send time:'11.89 ms'
1: input size:'142.61 MB', recieve_time:'11.88 ms', out:'142.61 MB', send time:'11.88 ms'
2: input size:'142.61 MB', recieve_time:'11.88 ms', out:'142.61 MB', send time:'11.88 ms'
3: input size:'142.61 MB', recieve_time:'11.88 ms', out:'142.61 MB', send time:'11.88 ms'
4: input size:'142.61 MB', recieve_time:'11.88 ms', out:'8.39 MB', send time:'0.70 ms'
5: input size:'8.45 MB', recieve_time:'0.70 ms', out:'0.07 MB', send time:'0.01 ms'
6: input size:'0.07 MB', recieve_time:'0.01 ms', out:'0.00 MB', send time:'0.00 ms'

Compuatation Communication ratio (comp/(comp+comm)):
forward {0: 0.83, 1: 0.53, 2: 0.44, 3: 0.6, 4: 0.95, 5: 1.0, 6: 1.0} 
backward {0: 1.0, 1: 0.74, 2: 0.65, 3: 0.79, 4: 0.74, 5: 0.99, 6: 0.99}

Analysis for T = fwd + bwd:
 {'expected_compute_utilization': {0: 1.0,
                                  1: 0.24,
                                  2: 0.16,
                                  3: 0.32,
                                  4: 0.24,
                                  5: 0.62,
                                  6: 0.0,
                                  'worstcase_std': 0.04},
 'pipeline_no_comm': {0: 195.2,
                      1: 46.64,
                      2: 31.34,
                      3: 61.97,
                      4: 46.9,
                      5: 120.46,
                      6: 0.96,
                      'worstcase': 195.2,
                      'worstcase_std': 7.06},
 'pipeline_vs_seq_no_comm': 1.84,
 'pipeline_with_non_parallel_comm': {0: 207.09,
                                     1: 70.4,
                                     2: 55.11,
                                     3: 85.74,
                                     4: 59.49,
                                     5: 121.17,
                                     6: 0.97,
                                     'worstcase': 207.09},
 'seq_no_comm_no_recomp': {0: 141.54,
                           1: 33.78,
                           2: 22.77,
                           3: 44.74,
                           4: 34.01,
                           5: 82.15,
                           6: 1.12}}

expected_speedup_compared_to_seq_no_recomp_no_comm: 1.739
Analysis max cuda memory used 14.30GB
"""